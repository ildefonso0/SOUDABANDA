# 🧠 Instruções para a IA Desenvolvedora — Integração do App com o Repositório GitHub

## 🎯 Objetivo principal
Integrar o aplicativo **Quiz Sou da Banda** com o repositório GitHub:

https://github.com/ildefonso0/QUIZ_SOU_DA_BANDA

yaml
Copiar código

Este repositório é a **base de dados central** da aplicação.  
A IA deve garantir que o código da app:
1. Puxa (`fetch`) os dados JSON e imagens diretamente do GitHub (`raw.githubusercontent.com`).
2. Guarda uma cópia local (cache) para modo offline.
3. Atualiza automaticamente o conteúdo a cada 24h (ou quando houver nova versão no `config.json`).
4. Estrutura e exibe os quizzes conforme o tipo especificado (múltipla escolha, verdadeiro/falso, completar frase, etc.).

---

## ⚙️ Estrutura do repositório (resumo para a IA)

QUIZ_SOU_DA_BANDA/
├── data/
│ ├── config.json → contém versão, tema e metadados
│ ├── categorias.json → define categorias (História, Geografia, Cultura...)
│ └── quizzes.json → contém TODAS as perguntas (diferentes tipos)
├── imagens/
│ ├── historia/
│ ├── geografia/
│ └── cultura/
└── README.md

markdown
Copiar código

---

## 🔄 Funcionamento da sincronização automática

1. **Inicialização**
   - Ao iniciar, a app faz `fetch` do ficheiro `config.json` remoto e compara com a versão local.
   - Se for a primeira vez, baixa tudo (`quizzes.json`, `categorias.json`, imagens).

2. **Comparação de versão**
   - Se `config.versao` ou `config.ultima_atualizacao` do remoto for diferente da local, a app baixa novamente os ficheiros e atualiza o cache.

3. **Agendamento**
   - O app repete essa verificação a cada 24h (`setInterval` ou `cron job`).

4. **Offline**
   - Se estiver sem Internet, usa os dados em cache (IndexedDB/localStorage).

---

## 💾 Localização dos ficheiros remotos

- Configurações:
https://raw.githubusercontent.com/ildefonso0/QUIZ_SOU_DA_BANDA/main/data/config.json

diff
Copiar código
- Categorias:
https://raw.githubusercontent.com/ildefonso0/QUIZ_SOU_DA_BANDA/main/data/categorias.json

diff
Copiar código
- Quizzes:
https://raw.githubusercontent.com/ildefonso0/QUIZ_SOU_DA_BANDA/main/data/quizzes.json

diff
Copiar código
- Imagens:
https://raw.githubusercontent.com/ildefonso0/QUIZ_SOU_DA_BANDA/main/imagens/<categoria>/<ficheiro>

yaml
Copiar código

---

## 🧩 Tipos de quiz suportados (a IA deve implementar estes modos no código)

1. **multipla_escolha**
 - Campos: `pergunta`, `opcoes`, `resposta_correta` (índice da opção)
 - Exibir botões de escolha múltipla.

2. **verdadeiro_falso**
 - Campos: `pergunta`, `resposta_correta` (true/false)
 - Exibir dois botões (Verdadeiro / Falso).

3. **imagem_para_texto**
 - Campos: `imagem`, `pergunta`, `resposta_correta`
 - Exibir imagem e campo de texto para resposta.

4. **completar_frase**
 - Campos: `pergunta`, `resposta_correta`
 - Mostrar a frase com um campo de input para completar.

5. **quiz_relacionar**
 - (Opcional futuro) Exibir duas colunas e permitir ligar itens relacionados.

---

## 🔧 Estrutura esperada dos ficheiros JSON

### `config.json`
```json
{
"versao": "1.0.0",
"ultima_atualizacao": "2025-10-24T00:00:00Z",
"intervalo_atualizacao_horas": 24,
"tema": {
  "cor_primaria": "#2A8BF2",
  "cor_secundaria": "#F2A22A",
  "modo": "claro"
}
}
categorias.json
json
Copiar código
[
  { "id": 1, "nome": "História", "descricao": "Eventos históricos", "icone": "<url>" },
  { "id": 2, "nome": "Geografia", "descricao": "Cidades, rios, províncias", "icone": "<url>" },
  { "id": 3, "nome": "Cultura", "descricao": "Dança e música", "icone": "<url>" }
]
quizzes.json
json
Copiar código
[
  {
    "id": 1,
    "categoria": "História",
    "tipo": "multipla_escolha",
    "pergunta": "Em que ano Angola conquistou a sua independência?",
    "opcoes": ["1973", "1974", "1975", "1976"],
    "resposta_correta": 2
  },
  {
    "id": 2,
    "categoria": "Geografia",
    "tipo": "verdadeiro_falso",
    "pergunta": "O rio Kwanza nasce em Benguela.",
    "resposta_correta": false
  },
  {
    "id": 3,
    "categoria": "Cultura",
    "tipo": "imagem_para_texto",
    "imagem": "<url>",
    "pergunta": "Qual é o nome desta dança?",
    "resposta_correta": "Kizomba"
  }
]
💻 Instruções técnicas para a IA adaptar o código
Criar módulo de sincronização (src/services/updateService.ts)

Função verificarAtualizacao()

Faz fetch de config.json.

Compara com versão local.

Se houver diferença, baixa os novos ficheiros e guarda localmente.

Função baixarDadosIniciais()

Executa na primeira vez que o utilizador abre a app.

Criar camada de cache

Se for app web → usar IndexedDB.

Se for app móvel (React Native) → usar AsyncStorage.

Agendar atualização

Usa setInterval() ou serviço de background para chamar verificarAtualizacao() a cada 24h (ou conforme intervalo_atualizacao_horas no config).

Carregar dados na UI

A UI deve ler sempre do cache local.

Se o cache estiver vazio, puxar da internet e preencher.

Renderização dinâmica dos tipos de quiz

Função renderQuiz(quiz) deve:

Identificar o tipo (quiz.tipo).

Renderizar o componente correto:

QuizMultiplaEscolha

QuizVerdadeiroFalso

QuizImagemTexto

QuizCompletarFrase

Cada componente deve emitir um evento “respostaSelecionada”.

Notificação de atualização

Quando o app baixar novos dados, deve avisar o utilizador (ex: toast “Conteúdo atualizado!”).

🧠 Lógica da IA (resumo de raciocínio)
A IA deve:

Ler este README e entender que o GitHub é o “backend” da app.

Gerar ou ajustar o código para:

Consumir os dados JSON via fetch diretamente dos links raw.githubusercontent.com;

Manter dados em cache local;

Fazer atualizações automáticas e comparar versões;

Exibir dinamicamente os diferentes tipos de quiz;

Notificar o utilizador sobre novas versões do conteúdo.

Nunca usar Google Drive ou Google Cloud Console.

Todos os dados vêm apenas do repositório GitHub.

📅 Frequência de atualização
O app deve sincronizar automaticamente a cada 24 horas, conforme definido no config.json.

Pode também oferecer um botão manual “Atualizar agora”.

🧱 Estrutura sugerida do projeto da app
pgsql
Copiar código
src/
├── components/
│   ├── QuizMultiplaEscolha.tsx
│   ├── QuizVerdadeiroFalso.tsx
│   ├── QuizImagemTexto.tsx
│   └── QuizCompletarFrase.tsx
├── services/
│   └── updateService.ts      ← sincronização GitHub
├── storage/
│   └── cache.ts              ← gestão do cache local
├── screens/
│   ├── HomeScreen.tsx
│   ├── QuizScreen.tsx
│   └── CategoriaScreen.tsx
└── App.tsx
✅ Resultado esperado
A app mostra quizzes organizados por categorias.

Atualiza o conteúdo a cada 24h automaticamente.

Puxa os dados do GitHub, sem necessidade de backend.

Mantém os dados disponíveis offline.

Cada tipo de quiz tem o seu comportamento visual próprio.

🔚 Conclusão
O repositório GitHub é a única fonte de dados.
A IA deve adaptar o código da app para ler, cachear e atualizar automaticamente esses dados.
Assim, sempre que o autor fizer push de novos quizzes ou imagens no GitHub, a app receberá automaticamente o novo conteúdo dentro de 24h, sem precisar ser reinstalada ou atualizada na loja.